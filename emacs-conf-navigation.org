* Navigation

#+begin_src emacs-lisp
  (defun my-horizontal-recenter ()
    "make the point horizontally centered in the window"
    (interactive)
    (let ((mid (/ (window-width) 2))
          (line-len (save-excursion (end-of-line) (current-column)))
          (cur (current-column)))
      (if (< mid cur)
          (set-window-hscroll (selected-window)
                              (- cur mid)))))

  (global-set-key (kbd "C-S-l") 'my-horizontal-recenter)
#+end_src

** avy                                                             :package:

- GROUP :: Convenience > Avy

#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :config
    (global-set-key (kbd "C-:") 'avy-goto-char)
    (global-set-key (kbd "C-'") 'avy-goto-char-2)
    (global-set-key (kbd "M-g f") 'avy-goto-line)
    (global-set-key (kbd "M-g w") 'avy-goto-word-1)
    (global-set-key (kbd "M-g e") 'avy-goto-word-0)
    (global-set-key (kbd "C-c C-j") 'avy-resume)
    )
#+end_src
  
** ace-window                                                      :package:

- GROUP :: convenience
- SITE :: https://github.com/abo-abo/ace-window

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (global-set-key (kbd "M-o") 'ace-window)
    )

  ;; (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

  ;; (defvar aw-dispatch-alistx
  ;;   '((?x aw-delete-window "Delete Window")
  ;; 	(?m aw-swap-window "Swap Windows")
  ;; 	(?M aw-move-window "Move Window")
  ;; 	(?j aw-switch-buffer-in-window "Select Buffer")
  ;; 	(?n aw-flip-window)
  ;; 	(?u aw-switch-buffer-other-window "Switch Buffer Other Window")
  ;; 	(?c aw-split-window-fair "Split Fair Window")
  ;; 	(?v aw-split-window-vert "Split Vert Window")
  ;; 	(?b aw-split-window-horz "Split Horz Window")
  ;; 	(?o delete-other-windows "Delete Other Windows")
  ;; 	(?? aw-show-dispatch-help))
  ;;   "List of actions for `aw-dispatch-default'.")
#+end_src
  
** windmove                                                        :package:

#+begin_src emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; GROUP: Convenience > Windmove
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (use-package windmove
    :ensure t
    :config
    (windmove-default-keybindings)
    )
#+end_src

** ace-link                                                        :package:

#+begin_src emacs-lisp
  (use-package ace-link
    :ensure t
    :config
    (ace-link-setup-default)
    (global-set-key (kbd "M-O") 'ace-link-addr)
    (with-eval-after-load "org-mode"
      (define-key org-mode-map (kbd "M-O") 'ace-link-org))
    ;; (define-key gnus-summary-mode-map (kbd "M-O") 'ace-link-gnus)
    ;; (define-key gnus-article-mode-map (kbd "M-O") 'ace-link-gnus)
    )
#+end_src
  
** helm-swoop                                                      :package:

#+begin_src emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; PACKAGE : helm-swoop
  ;;
  ;; List match lines to another buffer, which is able to squeeze by any words you input.
  ;; At the same time, the original buffer's cursor is jumping line
  ;; to line according to moving up and down the line list.
  ;;
  ;; SITE    : https://github.com/emacsorphanage/helm-swoop
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (use-package helm-swoop
    :ensure t
    :config
    ;; Change the keybinds to whatever you like :)
    (global-set-key (kbd "M-i") 'helm-swoop)
    (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
    (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
    (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)

    ;; When doing isearch, hand the word over to helm-swoop
    (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
    ;; From helm-swoop to helm-multi-swoop-all
    (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
    ;; When doing evil-search, hand the word over to helm-swoop
    ;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)

    ;; Instead of helm-multi-swoop-all, you can also use helm-multi-swoop-current-mode
    (define-key helm-swoop-map (kbd "M-m") 'helm-multi-swoop-current-mode-from-helm-swoop)

    ;; Move up and down like isearch
    (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
    (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
    (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
    (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)

    ;; Save buffer when helm-multi-swoop-edit complete
    (setq helm-multi-swoop-edit-save t)

    ;; If this value is t, split window inside the current window
    (setq helm-swoop-split-with-multiple-windows nil)

    ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
    (setq helm-swoop-split-direction 'split-window-vertically)

    ;; If nil, you can slightly boost invoke speed in exchange for text color
    (setq helm-swoop-speed-or-color nil)

    ;; ;; Go to the opposite side of line from the end or beginning of line
    (setq helm-swoop-move-to-line-cycle t)

    ;; Optional face for line numbers
    ;; Face name is `helm-swoop-line-number-face`
    (setq helm-swoop-use-line-number-face t)

    ;; If you prefer fuzzy matching
    (setq helm-swoop-use-fuzzy-match t)

    ;; If you would like to use migemo, enable helm's migemo feature
    )
#+end_src
